# TypeScript Rules
- Use Object-Oriented Programming (OOP) principles over functional programming
- Always create explicit types for variables, functions, parameters, and return values
- Use Value Objects for data validation and representation
- Prefer interfaces over type aliases for object types
- Use enums for fixed sets of values
- Implement proper error handling with custom error classes

# CSS Rules
- Use PicoCSS framework implicit classes-less approach
- Use sematic HTML, PicoCSS will handle the styles
- Customize PicoCSS variables for colors, fonts, spacing, etc.
- Implement mobile-first responsive design
- In case of custom classes, follow BEM (Block Element Modifier) naming convention
- Avoid deep nesting of selectors

# Git Rules
- Use Conventional Commits format:
  - feat: new features
  - fix: bug fixes
  - docs: documentation changes
  - style: formatting changes
  - refactor: code restructuring
  - test: adding/modifying tests
  - chore: maintenance tasks
- Write clear, concise commit messages
- No feature branches required
- Keep commits atomic and focused

# Code Quality
- Write self-documenting code
- Add JSDoc comments for public APIs
- Follow SOLID principles
- Implement proper error handling
- Use meaningful variable and function names 

## E2ETesting
- Use Playwright for e2e tests
- Prefer content-based testing over tag-based selection
- Follow AAA (Arrange, Act, Assert) pattern
- Use meaningful variable and mock data

