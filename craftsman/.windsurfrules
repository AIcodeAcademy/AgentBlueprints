# Git Rules
- Use Conventional Commits format:
  - feat: new features
  - fix: bug fixes
  - docs: documentation changes
  - style: formatting changes
  - refactor: code restructuring
  - test: adding/modifying tests
  - chore: maintenance tasks
- Write clear, concise commit messages
- No feature branches required
- Keep commits atomic and focused
- Update CHANGELOG.md with feat and fix entries

# Code Quality
- Write self-documenting code
- Add JSDoc comments for public APIs
- Implement proper error handling
- Use meaningful variable and function names 
- When OOP, follow SOLID principles
- When functional, favor pure functions and immutable data
  
# TypeScript Rules
- Use explicit types for variables, functions, parameters, and return values
- Prefer type aliases over interfaces for object types
- Use enums for fixed sets of values
- Implement proper error handling with custom error classes

# CSS Rules
- Use PicoCSS framework implicit classes-less approach
- Use sematic HTML, PicoCSS will handle the styles
- Customize PicoCSS variables for colors, fonts, spacing, etc.
- Implement mobile-first responsive design
- In case of custom classes, follow BEM naming convention in global scope

## E2ETesting
- Use Playwright for e2e tests
- Prefer content-based over tag-based selection
- Follow AAA (Arrange, Act, Assert) pattern
- Name variables with: inputX, fakeX, actualX,expectedX
- Use meaningful input and mock data

